services:
    db:
        image: mongo
        container_name: db
        ports:
            - "127.0.0.1:27017:27017"
        volumes:
            - dbdata:/data/db
            - ./mongo-init.sh:/docker-entrypoint-initdb.d/mongo-init.sh
        environment:
            - MONGO_INITDB_DATABASE=admin
            - MONGO_INITDB_ROOT_USERNAME=${MONGO_USER}
            - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASS}
            - MONGO_USER=${MONGO_USER}
            - MONGO_PASS=${MONGO_PASS}
            - DB_NAME=${DB_NAME}
        restart: always
        networks:
            - app-network

    vpn:
        image: thrnz/docker-wireguard-pia
        container_name: vpn
        volumes:
            # Auth token is stored here
            - pia:/pia
            # If enabled, the forwarded port is dumped to /pia-shared/port.dat for potential use in other containers
            - pia-shared:/pia-shared
        cap_add:
            - NET_ADMIN
            # SYS_MODULE might not be needed with a 5.6+ kernel?
            - SYS_MODULE
        # If the kernel module isn't available, mounting the tun device may be necessary for userspace implementations
        #devices:
        #  - /dev/net/tun:/dev/net/tun
        environment:
            # The following env vars are required:
            - LOC=spain
            - USER=${PIA_USERNAME}
            - PASS=${PIA_PASSWORD}
            # The rest are optional:
            #- LOCAL_NETWORK=192.168.1.0/24
            #- KEEPALIVE=25
            #- VPNDNS=8.8.8.8,8.8.4.4
            #- PORT_FORWARDING=1
        sysctls:
            # The wg-quick script tries to set this when setting up routing, however this requires running the container
            # with the --privileged flag set. Setting it here instead if needed means the container can be run with lower
            # privileges. This only needs setting if strict reverse path filtering (rp_filter=1) is used.
            - net.ipv4.conf.all.src_valid_mark=1
            # May as well disable ipv6. Should be blocked anyway.
            - net.ipv6.conf.default.disable_ipv6=1
            - net.ipv6.conf.all.disable_ipv6=1
            - net.ipv6.conf.lo.disable_ipv6=1
        # The container has no recovery logic. Use a healthcheck to catch disconnects.
#        healthcheck:
#            test: ping -c 1 www.google.com || exit 1
#            interval: 30s
#            timeout: 10s
#            retries: 3
        # The healthcheck has been causing issues. Discommented for testing.
        restart: always

    web:
        container_name: web
        build:
            context: .
            dockerfile: Dockerfile
        ports:
            - "${APP_PORT}:${APP_PORT}"
        environment:
            - NODE_ENV=production
        volumes:
            - .:/app
        depends_on:
            - db
        networks:
            - app-network
        restart: always

    nginx:
        image: nginx:alpine
        container_name: nginx
        volumes:
            - ./nginx.conf:/etc/nginx/nginx.conf  # Montar el archivo de configuraci√≥n de Nginx
        ports:
            - "80:80"  # Mapea el puerto 80 del host al puerto 80 del contenedor Nginx
        depends_on:
            - web
        networks:
            - app-network
        restart: always
volumes:
    dbdata:
    pia:
    pia-shared:
networks:
    app-network:
        driver: bridge